
Lab6_ElectricalInterfaces.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fcc  08003fcc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fcc  08003fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd4  08003fd4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000007c  08004058  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004058  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008319  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ee  00000000  00000000  000283c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  000299b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d0  00000000  00000000  0002a140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015d6e  00000000  00000000  0002a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006827  00000000  00000000  0004057e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088b8d  00000000  00000000  00046da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002138  00000000  00000000  000cf9b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003f58 	.word	0x08003f58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08003f58 	.word	0x08003f58

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <TextLCD_Strobe>:

#include "lcd.h"

//void delay_Microsecs(uint16_t);

static void TextLCD_Strobe(TextLCDType *lcd){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	// enable set reset with delay
	HAL_GPIO_WritePin(lcd->controlPort, lcd->enPin, GPIO_PIN_SET);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6858      	ldr	r0, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	899b      	ldrh	r3, [r3, #12]
 8000e20:	2201      	movs	r2, #1
 8000e22:	4619      	mov	r1, r3
 8000e24:	f001 fd74 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000e28:	2005      	movs	r0, #5
 8000e2a:	f000 fed7 	bl	8001bdc <HAL_Delay>
//	delay_Microsecs(50);
	HAL_GPIO_WritePin(lcd->controlPort, lcd->enPin, GPIO_PIN_RESET);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	899b      	ldrh	r3, [r3, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f001 fd69 	bl	8002910 <HAL_GPIO_WritePin>
//	delay_Microsecs(110);
	HAL_Delay(5);
 8000e3e:	2005      	movs	r0, #5
 8000e40:	f000 fecc 	bl	8001bdc <HAL_Delay>

}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <TextLCD_Cmd>:

static void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	// reset rs to select instructions register
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rsPin, GPIO_PIN_RESET);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6858      	ldr	r0, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	891b      	ldrh	r3, [r3, #8]
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	f001 fd54 	bl	8002910 <HAL_GPIO_WritePin>
	lcd->dataPort->ODR = (lcd->dataPort->ODR & 0xFFFFFF00) | cmd;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e72:	78fa      	ldrb	r2, [r7, #3]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	615a      	str	r2, [r3, #20]
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <TextLCD_Data>:

static void TextLCD_Data(TextLCDType *lcd, uint8_t data){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	// set rs to select data register
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rsPin, GPIO_PIN_SET);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6858      	ldr	r0, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	891b      	ldrh	r3, [r3, #8]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f001 fd38 	bl	8002910 <HAL_GPIO_WritePin>
	lcd->dataPort->ODR = (lcd->dataPort->ODR & 0xFFFFFF00) | data;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	615a      	str	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <TextLCD_Init>:


void TextLCD_Init(TextLCDType *lcd, GPIO_TypeDef *controlPort, uint16_t rsPin, uint16_t rwPin, uint16_t enPin, GPIO_TypeDef *dataPort) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80bb      	strh	r3, [r7, #4]
	// initialize struct variables
	lcd->rsPin = rsPin;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	88fa      	ldrh	r2, [r7, #6]
 8000ed6:	811a      	strh	r2, [r3, #8]
	lcd->enPin = enPin;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	8c3a      	ldrh	r2, [r7, #32]
 8000edc:	819a      	strh	r2, [r3, #12]
	lcd->rwPin = rwPin;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	815a      	strh	r2, [r3, #10]
	lcd->controlPort = controlPort; 	// port controlpins, rw, rs, en
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	605a      	str	r2, [r3, #4]
	lcd->dataPort = dataPort;		// port D pins
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eee:	601a      	str	r2, [r3, #0]

	// reset rw and rs
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rwPin, GPIO_PIN_RESET);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6858      	ldr	r0, [r3, #4]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	895b      	ldrh	r3, [r3, #10]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	f001 fd08 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rsPin, GPIO_PIN_RESET);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6858      	ldr	r0, [r3, #4]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	891b      	ldrh	r3, [r3, #8]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f001 fd00 	bl	8002910 <HAL_GPIO_WritePin>

	// 8 bit init
	uint8_t cmd = 0x38;
 8000f10:	2338      	movs	r3, #56	; 0x38
 8000f12:	75fb      	strb	r3, [r7, #23]
	TextLCD_Cmd(lcd, cmd);
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	4619      	mov	r1, r3
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ff97 	bl	8000e4c <TextLCD_Cmd>
	TextLCD_Strobe(lcd);
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff ff76 	bl	8000e10 <TextLCD_Strobe>
	HAL_Delay(4);
 8000f24:	2004      	movs	r0, #4
 8000f26:	f000 fe59 	bl	8001bdc <HAL_Delay>

	TextLCD_Cmd(lcd, cmd);
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff ff8c 	bl	8000e4c <TextLCD_Cmd>
	TextLCD_Strobe(lcd);
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff ff6b 	bl	8000e10 <TextLCD_Strobe>

	TextLCD_Cmd(lcd, cmd);
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff ff84 	bl	8000e4c <TextLCD_Cmd>
	TextLCD_Strobe(lcd);
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ff63 	bl	8000e10 <TextLCD_Strobe>

	// clear Display
	cmd = 0x01;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	75fb      	strb	r3, [r7, #23]
	TextLCD_Cmd(lcd, cmd);
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	4619      	mov	r1, r3
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f7ff ff7a 	bl	8000e4c <TextLCD_Cmd>
	TextLCD_Strobe(lcd);
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff ff59 	bl	8000e10 <TextLCD_Strobe>

	// Entry mode
	cmd = 0x06;
 8000f5e:	2306      	movs	r3, #6
 8000f60:	75fb      	strb	r3, [r7, #23]
	TextLCD_Cmd(lcd, cmd);
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	4619      	mov	r1, r3
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff ff70 	bl	8000e4c <TextLCD_Cmd>
	TextLCD_Strobe(lcd);
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f7ff ff4f 	bl	8000e10 <TextLCD_Strobe>

	// Display on
	cmd = 0x0c;
 8000f72:	230c      	movs	r3, #12
 8000f74:	75fb      	strb	r3, [r7, #23]
	TextLCD_Cmd(lcd, cmd);
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff ff66 	bl	8000e4c <TextLCD_Cmd>
	TextLCD_Strobe(lcd);
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ff45 	bl	8000e10 <TextLCD_Strobe>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <TextLCD_Clear>:
	TextLCD_Strobe(lcd);
//	delay_Microsecs(2000);
	HAL_Delay(2);
}

void TextLCD_Clear(TextLCDType *lcd){
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0x01;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
	TextLCD_Cmd(lcd, cmd);		// clear display
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff54 	bl	8000e4c <TextLCD_Cmd>
	TextLCD_Strobe(lcd);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff33 	bl	8000e10 <TextLCD_Strobe>
//	delay_Microsecs(2000);
	HAL_Delay(2);
 8000faa:	2002      	movs	r0, #2
 8000fac:	f000 fe16 	bl	8001bdc <HAL_Delay>
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <TextLCD_Position>:

void TextLCD_Position(TextLCDType *lcd, int x, int y){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	//move cursor
	if(x >= 0 && x <= 15 && y >= 0 && y <= 1){		// to stay inside the screen
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db18      	blt.n	8000ffc <TextLCD_Position+0x44>
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	dc15      	bgt.n	8000ffc <TextLCD_Position+0x44>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db12      	blt.n	8000ffc <TextLCD_Position+0x44>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	dc0f      	bgt.n	8000ffc <TextLCD_Position+0x44>
		uint8_t cmd = 0x80+x+0x40+y;
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3b40      	subs	r3, #64	; 0x40
 8000fea:	75fb      	strb	r3, [r7, #23]
		TextLCD_Cmd(lcd, cmd);
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f7ff ff2b 	bl	8000e4c <TextLCD_Cmd>
		TextLCD_Strobe(lcd);
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f7ff ff0a 	bl	8000e10 <TextLCD_Strobe>
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <TextLCD_Putchar>:

void TextLCD_Putchar(TextLCDType *lcd, uint8_t data){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	TextLCD_Data(lcd, data);
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff35 	bl	8000e84 <TextLCD_Data>
	TextLCD_Strobe(lcd);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fef8 	bl	8000e10 <TextLCD_Strobe>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <TextLCD_Puts>:

void TextLCD_Puts(TextLCDType *lcd, char *string){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	int strLength = strlen(string);
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff f8d0 	bl	80001d8 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	60bb      	str	r3, [r7, #8]

	// loop string
	for(int i = 0; i < strLength; i+=1){
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e00a      	b.n	8001058 <TextLCD_Puts+0x30>
		TextLCD_Putchar(lcd, string[i]);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4619      	mov	r1, r3
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ffd9 	bl	8001004 <TextLCD_Putchar>
	for(int i = 0; i < strLength; i+=1){
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf0      	blt.n	8001042 <TextLCD_Puts+0x1a>
	}
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <ReadAnalogTemp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int16_t ReadAnalogTemp(){
 8001068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001070:	484d      	ldr	r0, [pc, #308]	; (80011a8 <ReadAnalogTemp+0x140>)
 8001072:	f000 fe19 	bl	8001ca8 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8001076:	f04f 31ff 	mov.w	r1, #4294967295
 800107a:	484b      	ldr	r0, [pc, #300]	; (80011a8 <ReadAnalogTemp+0x140>)
 800107c:	f000 feed 	bl	8001e5a <HAL_ADC_PollForConversion>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d109      	bne.n	800109a <ReadAnalogTemp+0x32>
		channel_0 = HAL_ADC_GetValue(&hadc1);
 8001086:	4848      	ldr	r0, [pc, #288]	; (80011a8 <ReadAnalogTemp+0x140>)
 8001088:	f000 ff6b 	bl	8001f62 <HAL_ADC_GetValue>
 800108c:	ee07 0a90 	vmov	s15, r0
 8001090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001094:	4b45      	ldr	r3, [pc, #276]	; (80011ac <ReadAnalogTemp+0x144>)
 8001096:	edc3 7a00 	vstr	s15, [r3]
	}
	HAL_ADC_Stop(&hadc1);
 800109a:	4843      	ldr	r0, [pc, #268]	; (80011a8 <ReadAnalogTemp+0x140>)
 800109c:	f000 feaa 	bl	8001df4 <HAL_ADC_Stop>

	int16_t temp = 0.0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	82fb      	strh	r3, [r7, #22]
	int beta = 3450.0;
 80010a4:	f640 537a 	movw	r3, #3450	; 0xd7a
 80010a8:	613b      	str	r3, [r7, #16]
	int rt = 0.0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
	int r25 = 1000.0;
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	60bb      	str	r3, [r7, #8]
	int vs = 5.0;
 80010b4:	2305      	movs	r3, #5
 80010b6:	607b      	str	r3, [r7, #4]

	int vout = (channel_0/4095.0)*3.3;
 80010b8:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <ReadAnalogTemp+0x144>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f9f7 	bl	80004b0 <__aeabi_f2d>
 80010c2:	a331      	add	r3, pc, #196	; (adr r3, 8001188 <ReadAnalogTemp+0x120>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fb74 	bl	80007b4 <__aeabi_ddiv>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4618      	mov	r0, r3
 80010d2:	4621      	mov	r1, r4
 80010d4:	a32e      	add	r3, pc, #184	; (adr r3, 8001190 <ReadAnalogTemp+0x128>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa41 	bl	8000560 <__aeabi_dmul>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	4618      	mov	r0, r3
 80010e4:	4621      	mov	r1, r4
 80010e6:	f7ff fceb 	bl	8000ac0 <__aeabi_d2iz>
 80010ea:	4603      	mov	r3, r0
 80010ec:	603b      	str	r3, [r7, #0]

	// thermistor resistance
	rt = (r25*vs / vout)-r25;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	fb02 f203 	mul.w	r2, r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	fb92 f2f3 	sdiv	r2, r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	60fb      	str	r3, [r7, #12]

	// calculate temperature
	temp = beta/(log(rt/r25) + (beta/298.15))-273.15;
 8001102:	6938      	ldr	r0, [r7, #16]
 8001104:	f7ff f9c2 	bl	800048c <__aeabi_i2d>
 8001108:	4604      	mov	r4, r0
 800110a:	460d      	mov	r5, r1
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	fb92 f3f3 	sdiv	r3, r2, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f9b9 	bl	800048c <__aeabi_i2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	ec43 2b10 	vmov	d0, r2, r3
 8001122:	f002 fcdd 	bl	8003ae0 <log>
 8001126:	ec59 8b10 	vmov	r8, r9, d0
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f7ff f9ae 	bl	800048c <__aeabi_i2d>
 8001130:	a319      	add	r3, pc, #100	; (adr r3, 8001198 <ReadAnalogTemp+0x130>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fb3d 	bl	80007b4 <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4640      	mov	r0, r8
 8001140:	4649      	mov	r1, r9
 8001142:	f7ff f857 	bl	80001f4 <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff fb31 	bl	80007b4 <__aeabi_ddiv>
 8001152:	4603      	mov	r3, r0
 8001154:	460c      	mov	r4, r1
 8001156:	4618      	mov	r0, r3
 8001158:	4621      	mov	r1, r4
 800115a:	a311      	add	r3, pc, #68	; (adr r3, 80011a0 <ReadAnalogTemp+0x138>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff f846 	bl	80001f0 <__aeabi_dsub>
 8001164:	4603      	mov	r3, r0
 8001166:	460c      	mov	r4, r1
 8001168:	4618      	mov	r0, r3
 800116a:	4621      	mov	r1, r4
 800116c:	f7ff fca8 	bl	8000ac0 <__aeabi_d2iz>
 8001170:	4603      	mov	r3, r0
 8001172:	82fb      	strh	r3, [r7, #22]

	return temp;
 8001174:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	00000000 	.word	0x00000000
 800118c:	40affe00 	.word	0x40affe00
 8001190:	66666666 	.word	0x66666666
 8001194:	400a6666 	.word	0x400a6666
 8001198:	66666666 	.word	0x66666666
 800119c:	4072a266 	.word	0x4072a266
 80011a0:	66666666 	.word	0x66666666
 80011a4:	40711266 	.word	0x40711266
 80011a8:	200000fc 	.word	0x200000fc
 80011ac:	20000098 	.word	0x20000098

080011b0 <Read_DHT11_bit_raw>:

int16_t Read_DHT11_bit_raw(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	uint16_t cnt_low = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	80fb      	strh	r3, [r7, #6]

	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 0){
 80011ba:	e00b      	b.n	80011d4 <Read_DHT11_bit_raw+0x24>
		cnt_low ++;
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	3301      	adds	r3, #1
 80011c0:	80fb      	strh	r3, [r7, #6]
		if(cnt_low >= DHT11_timeout){
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <Read_DHT11_bit_raw+0x70>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	88fa      	ldrh	r2, [r7, #6]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d303      	bcc.n	80011d4 <Read_DHT11_bit_raw+0x24>
			return DHT11_timeout;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <Read_DHT11_bit_raw+0x70>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	e021      	b.n	8001218 <Read_DHT11_bit_raw+0x68>
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 0){
 80011d4:	2110      	movs	r1, #16
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <Read_DHT11_bit_raw+0x74>)
 80011d8:	f001 fb82 	bl	80028e0 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0ec      	beq.n	80011bc <Read_DHT11_bit_raw+0xc>
		}
	}

	uint16_t cnt_high = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	80bb      	strh	r3, [r7, #4]

	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 1){
 80011e6:	e00b      	b.n	8001200 <Read_DHT11_bit_raw+0x50>
		cnt_high ++;
 80011e8:	88bb      	ldrh	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	80bb      	strh	r3, [r7, #4]
		if(cnt_high >= DHT11_timeout){
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <Read_DHT11_bit_raw+0x70>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d303      	bcc.n	8001200 <Read_DHT11_bit_raw+0x50>
			return DHT11_timeout;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <Read_DHT11_bit_raw+0x70>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	e00b      	b.n	8001218 <Read_DHT11_bit_raw+0x68>
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 1){
 8001200:	2110      	movs	r1, #16
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <Read_DHT11_bit_raw+0x74>)
 8001204:	f001 fb6c 	bl	80028e0 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d0ec      	beq.n	80011e8 <Read_DHT11_bit_raw+0x38>
		}
	}

	return cnt_high-cnt_low;
 800120e:	88ba      	ldrh	r2, [r7, #4]
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	b21b      	sxth	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000004 	.word	0x20000004
 8001224:	40020000 	.word	0x40020000

08001228 <Read_DHT11>:

int16_t Read_DHT11(){
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
	uint16_t cnt = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	80fb      	strh	r3, [r7, #6]

	//HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, SET);
	HAL_Delay(100);
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f000 fcd2 	bl	8001bdc <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4843      	ldr	r0, [pc, #268]	; (800134c <Read_DHT11+0x124>)
 800123e:	f001 fb67 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001242:	2014      	movs	r0, #20
 8001244:	f000 fcca 	bl	8001bdc <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2110      	movs	r1, #16
 800124c:	483f      	ldr	r0, [pc, #252]	; (800134c <Read_DHT11+0x124>)
 800124e:	f001 fb5f 	bl	8002910 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 1){
 8001252:	e00a      	b.n	800126a <Read_DHT11+0x42>
		cnt++;
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	3301      	adds	r3, #1
 8001258:	80fb      	strh	r3, [r7, #6]
		if(cnt > DHT11_timeout){
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <Read_DHT11+0x128>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	88fa      	ldrh	r2, [r7, #6]
 8001260:	429a      	cmp	r2, r3
 8001262:	d902      	bls.n	800126a <Read_DHT11+0x42>
			return -99;
 8001264:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8001268:	e06c      	b.n	8001344 <Read_DHT11+0x11c>
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 1){
 800126a:	2110      	movs	r1, #16
 800126c:	4837      	ldr	r0, [pc, #220]	; (800134c <Read_DHT11+0x124>)
 800126e:	f001 fb37 	bl	80028e0 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b01      	cmp	r3, #1
 8001276:	d0ed      	beq.n	8001254 <Read_DHT11+0x2c>
		}
	}

	for(uint8_t k = 0; k<41; k++){
 8001278:	2300      	movs	r3, #0
 800127a:	717b      	strb	r3, [r7, #5]
 800127c:	e00a      	b.n	8001294 <Read_DHT11+0x6c>
		DHT11_buff_raw[k] = Read_DHT11_bit_raw();
 800127e:	797c      	ldrb	r4, [r7, #5]
 8001280:	f7ff ff96 	bl	80011b0 <Read_DHT11_bit_raw>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <Read_DHT11+0x12c>)
 800128a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t k = 0; k<41; k++){
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	3301      	adds	r3, #1
 8001292:	717b      	strb	r3, [r7, #5]
 8001294:	797b      	ldrb	r3, [r7, #5]
 8001296:	2b28      	cmp	r3, #40	; 0x28
 8001298:	d9f1      	bls.n	800127e <Read_DHT11+0x56>
	}

	uint8_t val;
	for(uint8_t byte = 0; byte < 5; byte++){
 800129a:	2300      	movs	r3, #0
 800129c:	70fb      	strb	r3, [r7, #3]
 800129e:	e032      	b.n	8001306 <Read_DHT11+0xde>
		val = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	713b      	strb	r3, [r7, #4]
		for(uint8_t bit = 0; bit<8; bit++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	70bb      	strb	r3, [r7, #2]
 80012a8:	e023      	b.n	80012f2 <Read_DHT11+0xca>
			if(DHT11_buff_raw[(byte << 3) +bit+1] >= DHT11_timeout){
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	00da      	lsls	r2, r3, #3
 80012ae:	78bb      	ldrb	r3, [r7, #2]
 80012b0:	4413      	add	r3, r2
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <Read_DHT11+0x12c>)
 80012b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <Read_DHT11+0x128>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	db02      	blt.n	80012ca <Read_DHT11+0xa2>
				return -99;
 80012c4:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80012c8:	e03c      	b.n	8001344 <Read_DHT11+0x11c>
			}

			val= val <<1;
 80012ca:	793b      	ldrb	r3, [r7, #4]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	713b      	strb	r3, [r7, #4]

			if(DHT11_buff_raw[(byte << 3)+bit+1]>0){
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	4413      	add	r3, r2
 80012d8:	3301      	adds	r3, #1
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <Read_DHT11+0x12c>)
 80012dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dd03      	ble.n	80012ec <Read_DHT11+0xc4>
				val= val | 0x01;
 80012e4:	793b      	ldrb	r3, [r7, #4]
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	713b      	strb	r3, [r7, #4]
		for(uint8_t bit = 0; bit<8; bit++){
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	3301      	adds	r3, #1
 80012f0:	70bb      	strb	r3, [r7, #2]
 80012f2:	78bb      	ldrb	r3, [r7, #2]
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	d9d8      	bls.n	80012aa <Read_DHT11+0x82>
			}
		}
		DHT11_data[byte] = val;
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	4917      	ldr	r1, [pc, #92]	; (8001358 <Read_DHT11+0x130>)
 80012fc:	793a      	ldrb	r2, [r7, #4]
 80012fe:	54ca      	strb	r2, [r1, r3]
	for(uint8_t byte = 0; byte < 5; byte++){
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	3301      	adds	r3, #1
 8001304:	70fb      	strb	r3, [r7, #3]
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d9c9      	bls.n	80012a0 <Read_DHT11+0x78>
	}

	uint8_t sum = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	707b      	strb	r3, [r7, #1]
	for(uint8_t byte=0; byte < 4; byte++){
 8001310:	2300      	movs	r3, #0
 8001312:	703b      	strb	r3, [r7, #0]
 8001314:	e008      	b.n	8001328 <Read_DHT11+0x100>
		sum+= DHT11_data[byte];
 8001316:	783b      	ldrb	r3, [r7, #0]
 8001318:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <Read_DHT11+0x130>)
 800131a:	5cd2      	ldrb	r2, [r2, r3]
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	4413      	add	r3, r2
 8001320:	707b      	strb	r3, [r7, #1]
	for(uint8_t byte=0; byte < 4; byte++){
 8001322:	783b      	ldrb	r3, [r7, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	703b      	strb	r3, [r7, #0]
 8001328:	783b      	ldrb	r3, [r7, #0]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d9f3      	bls.n	8001316 <Read_DHT11+0xee>
	}

	if(sum != DHT11_data[4]){
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <Read_DHT11+0x130>)
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	787a      	ldrb	r2, [r7, #1]
 8001334:	429a      	cmp	r2, r3
 8001336:	d002      	beq.n	800133e <Read_DHT11+0x116>
		return -99;
 8001338:	f06f 0362 	mvn.w	r3, #98	; 0x62
 800133c:	e002      	b.n	8001344 <Read_DHT11+0x11c>
	}

	return DHT11_data[2];
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <Read_DHT11+0x130>)
 8001340:	789b      	ldrb	r3, [r3, #2]
 8001342:	b21b      	sxth	r3, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	40020000 	.word	0x40020000
 8001350:	20000004 	.word	0x20000004
 8001354:	200000a4 	.word	0x200000a4
 8001358:	20000144 	.word	0x20000144

0800135c <heaterLED>:


void heaterLED(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	if(DHT11Temp < setTemp && DHT11Temp != -99){
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <heaterLED+0x48>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <heaterLED+0x4c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	da0f      	bge.n	800138c <heaterLED+0x30>
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <heaterLED+0x48>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001374:	d00a      	beq.n	800138c <heaterLED+0x30>
		// turn on LEDs
		HAL_GPIO_WritePin(LED_HEATER_1_GPIO_Port, LED_HEATER_1_Pin, SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2120      	movs	r1, #32
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <heaterLED+0x50>)
 800137c:	f001 fac8 	bl	8002910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_HEATER_2_GPIO_Port, LED_HEATER_2_Pin, SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2140      	movs	r1, #64	; 0x40
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <heaterLED+0x50>)
 8001386:	f001 fac3 	bl	8002910 <HAL_GPIO_WritePin>
 800138a:	e009      	b.n	80013a0 <heaterLED+0x44>
	}
	else{
		// LEDs off
		HAL_GPIO_WritePin(LED_HEATER_1_GPIO_Port, LED_HEATER_1_Pin, RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2120      	movs	r1, #32
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <heaterLED+0x50>)
 8001392:	f001 fabd 	bl	8002910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_HEATER_2_GPIO_Port, LED_HEATER_2_Pin, RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <heaterLED+0x50>)
 800139c:	f001 fab8 	bl	8002910 <HAL_GPIO_WritePin>
	}
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000009c 	.word	0x2000009c
 80013a8:	20000000 	.word	0x20000000
 80013ac:	40020400 	.word	0x40020400

080013b0 <intToString>:

char* intToString(int digit){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	// snprintf
	itoa(digit, buff, 10);
 80013b8:	220a      	movs	r2, #10
 80013ba:	4904      	ldr	r1, [pc, #16]	; (80013cc <intToString+0x1c>)
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f002 fb47 	bl	8003a50 <itoa>
	return buff;
 80013c2:	4b02      	ldr	r3, [pc, #8]	; (80013cc <intToString+0x1c>)
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000f8 	.word	0x200000f8

080013d0 <updateLCD>:
		}
		eventButton = FILTERED_PRESSED_BUTTON_EVENT;
	}
}	*/

void updateLCD(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	// print out values on LCD

	//buttons();

	// position 0
	TextLCD_Clear(&LCD);
 80013d4:	481f      	ldr	r0, [pc, #124]	; (8001454 <updateLCD+0x84>)
 80013d6:	f7ff fdda 	bl	8000f8e <TextLCD_Clear>

	// set temperature
	TextLCD_Puts(&LCD, "set:");
 80013da:	491f      	ldr	r1, [pc, #124]	; (8001458 <updateLCD+0x88>)
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <updateLCD+0x84>)
 80013de:	f7ff fe23 	bl	8001028 <TextLCD_Puts>
	TextLCD_Puts(&LCD, intToString(setTemp));
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <updateLCD+0x8c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffe2 	bl	80013b0 <intToString>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4818      	ldr	r0, [pc, #96]	; (8001454 <updateLCD+0x84>)
 80013f2:	f7ff fe19 	bl	8001028 <TextLCD_Puts>

	// thermistor
	thermistorTemp = ReadAnalogTemp();
 80013f6:	f7ff fe37 	bl	8001068 <ReadAnalogTemp>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <updateLCD+0x90>)
 8001400:	601a      	str	r2, [r3, #0]
	TextLCD_Puts(&LCD, " th:");
 8001402:	4918      	ldr	r1, [pc, #96]	; (8001464 <updateLCD+0x94>)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <updateLCD+0x84>)
 8001406:	f7ff fe0f 	bl	8001028 <TextLCD_Puts>
	TextLCD_Puts(&LCD, intToString(thermistorTemp));
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <updateLCD+0x90>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ffce 	bl	80013b0 <intToString>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <updateLCD+0x84>)
 800141a:	f7ff fe05 	bl	8001028 <TextLCD_Puts>

	// DHT11
	TextLCD_Position(&LCD, 1, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2101      	movs	r1, #1
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <updateLCD+0x84>)
 8001424:	f7ff fdc8 	bl	8000fb8 <TextLCD_Position>
	DHT11Temp = Read_DHT11();
 8001428:	f7ff fefe 	bl	8001228 <Read_DHT11>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <updateLCD+0x98>)
 8001432:	601a      	str	r2, [r3, #0]
	TextLCD_Puts(&LCD, " DHT11:");
 8001434:	490d      	ldr	r1, [pc, #52]	; (800146c <updateLCD+0x9c>)
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <updateLCD+0x84>)
 8001438:	f7ff fdf6 	bl	8001028 <TextLCD_Puts>
	TextLCD_Puts(&LCD, intToString(DHT11Temp));
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <updateLCD+0x98>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffb5 	bl	80013b0 <intToString>
 8001446:	4603      	mov	r3, r0
 8001448:	4619      	mov	r1, r3
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <updateLCD+0x84>)
 800144c:	f7ff fdec 	bl	8001028 <TextLCD_Puts>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000018c 	.word	0x2000018c
 8001458:	08003f70 	.word	0x08003f70
 800145c:	20000000 	.word	0x20000000
 8001460:	200000a0 	.word	0x200000a0
 8001464:	08003f78 	.word	0x08003f78
 8001468:	2000009c 	.word	0x2000009c
 800146c:	08003f80 	.word	0x08003f80

08001470 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001476:	f000 fb3f 	bl	8001af8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800147a:	f000 f81f 	bl	80014bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800147e:	f000 f905 	bl	800168c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001482:	f000 f8d9 	bl	8001638 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001486:	f000 f885 	bl	8001594 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	TextLCD_Init(&LCD, GPIOB, LCD_RS_Pin, LCD_RW_Pin, LCD_E_Pin, GPIOC);	// LCD initialise
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <main+0x40>)
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2304      	movs	r3, #4
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2302      	movs	r3, #2
 8001494:	2201      	movs	r2, #1
 8001496:	4907      	ldr	r1, [pc, #28]	; (80014b4 <main+0x44>)
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <main+0x48>)
 800149a:	f7ff fd0f 	bl	8000ebc <TextLCD_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		updateLCD();
 800149e:	f7ff ff97 	bl	80013d0 <updateLCD>
		heaterLED();
 80014a2:	f7ff ff5b 	bl	800135c <heaterLED>
		HAL_Delay(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014aa:	f000 fb97 	bl	8001bdc <HAL_Delay>
		updateLCD();
 80014ae:	e7f6      	b.n	800149e <main+0x2e>
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020400 	.word	0x40020400
 80014b8:	2000018c 	.word	0x2000018c

080014bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fac2 	bl	8003a54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <SystemClock_Config+0xd0>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <SystemClock_Config+0xd0>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <SystemClock_Config+0xd0>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <SystemClock_Config+0xd4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <SystemClock_Config+0xd4>)
 800150a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <SystemClock_Config+0xd4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001530:	2310      	movs	r3, #16
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001534:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800153a:	2304      	movs	r3, #4
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800153e:	2307      	movs	r3, #7
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fa14 	bl	8002974 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001552:	f000 f99b 	bl	800188c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fc6e 	bl	8002e54 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800157e:	f000 f985 	bl	800188c <Error_Handler>
	}
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	; 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_ADC1_Init+0x98>)
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <MX_ADC1_Init+0x9c>)
 80015aa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_ADC1_Init+0x98>)
 80015ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015b2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_ADC1_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_ADC1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_ADC1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_ADC1_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_ADC1_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_ADC1_Init+0x98>)
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <MX_ADC1_Init+0xa0>)
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_ADC1_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_ADC1_Init+0x98>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_ADC1_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_ADC1_Init+0x98>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_ADC1_Init+0x98>)
 80015f6:	f000 fb13 	bl	8001c20 <HAL_ADC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001600:	f000 f944 	bl	800188c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800160c:	2307      	movs	r3, #7
 800160e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_ADC1_Init+0x98>)
 8001616:	f000 fcb1 	bl	8001f7c <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001620:	f000 f934 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000fc 	.word	0x200000fc
 8001630:	40012000 	.word	0x40012000
 8001634:	0f000001 	.word	0x0f000001

08001638 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f001 fde2 	bl	8003238 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800167a:	f000 f907 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000014c 	.word	0x2000014c
 8001688:	40004400 	.word	0x40004400

0800168c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b55      	ldr	r3, [pc, #340]	; (80017fc <MX_GPIO_Init+0x170>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a54      	ldr	r2, [pc, #336]	; (80017fc <MX_GPIO_Init+0x170>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b52      	ldr	r3, [pc, #328]	; (80017fc <MX_GPIO_Init+0x170>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <MX_GPIO_Init+0x170>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a4d      	ldr	r2, [pc, #308]	; (80017fc <MX_GPIO_Init+0x170>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <MX_GPIO_Init+0x170>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <MX_GPIO_Init+0x170>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a46      	ldr	r2, [pc, #280]	; (80017fc <MX_GPIO_Init+0x170>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b44      	ldr	r3, [pc, #272]	; (80017fc <MX_GPIO_Init+0x170>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b40      	ldr	r3, [pc, #256]	; (80017fc <MX_GPIO_Init+0x170>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <MX_GPIO_Init+0x170>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <MX_GPIO_Init+0x170>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8001712:	2200      	movs	r2, #0
 8001714:	21ff      	movs	r1, #255	; 0xff
 8001716:	483a      	ldr	r0, [pc, #232]	; (8001800 <MX_GPIO_Init+0x174>)
 8001718:	f001 f8fa 	bl	8002910 <HAL_GPIO_WritePin>
			|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DHT11_Pin|LD2_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2130      	movs	r1, #48	; 0x30
 8001720:	4838      	ldr	r0, [pc, #224]	; (8001804 <MX_GPIO_Init+0x178>)
 8001722:	f001 f8f5 	bl	8002910 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LED_HEATER_1_Pin
 8001726:	2200      	movs	r2, #0
 8001728:	2167      	movs	r1, #103	; 0x67
 800172a:	4837      	ldr	r0, [pc, #220]	; (8001808 <MX_GPIO_Init+0x17c>)
 800172c:	f001 f8f0 	bl	8002910 <HAL_GPIO_WritePin>
			|LED_HEATER_2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <MX_GPIO_Init+0x180>)
 8001738:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	482e      	ldr	r0, [pc, #184]	; (8001800 <MX_GPIO_Init+0x174>)
 8001746:	f000 ff49 	bl	80025dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
	GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 800174a:	23ff      	movs	r3, #255	; 0xff
 800174c:	617b      	str	r3, [r7, #20]
			|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4827      	ldr	r0, [pc, #156]	; (8001800 <MX_GPIO_Init+0x174>)
 8001762:	f000 ff3b 	bl	80025dc <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT11_Pin */
	GPIO_InitStruct.Pin = DHT11_Pin;
 8001766:	2310      	movs	r3, #16
 8001768:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800176a:	2311      	movs	r3, #17
 800176c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4821      	ldr	r0, [pc, #132]	; (8001804 <MX_GPIO_Init+0x178>)
 800177e:	f000 ff2d 	bl	80025dc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001782:	2320      	movs	r3, #32
 8001784:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	481a      	ldr	r0, [pc, #104]	; (8001804 <MX_GPIO_Init+0x178>)
 800179a:	f000 ff1f 	bl	80025dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_E_Pin LED_HEATER_1_Pin
                           LED_HEATER_2_Pin */
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LED_HEATER_1_Pin
 800179e:	2367      	movs	r3, #103	; 0x67
 80017a0:	617b      	str	r3, [r7, #20]
			|LED_HEATER_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4814      	ldr	r0, [pc, #80]	; (8001808 <MX_GPIO_Init+0x17c>)
 80017b6:	f000 ff11 	bl	80025dc <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin;
 80017ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_GPIO_Init+0x184>)
 80017c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <MX_GPIO_Init+0x178>)
 80017d0:	f000 ff04 	bl	80025dc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2017      	movs	r0, #23
 80017da:	f000 fec8 	bl	800256e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017de:	2017      	movs	r0, #23
 80017e0:	f000 fee1 	bl	80025a6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2028      	movs	r0, #40	; 0x28
 80017ea:	f000 fec0 	bl	800256e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ee:	2028      	movs	r0, #40	; 0x28
 80017f0:	f000 fed9 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020800 	.word	0x40020800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	10210000 	.word	0x10210000
 8001810:	10110000 	.word	0x10110000

08001814 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Buttons
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
	//test interrupt
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2120      	movs	r1, #32
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <HAL_GPIO_EXTI_Callback+0x70>)
 8001824:	f001 f874 	bl	8002910 <HAL_GPIO_WritePin>

	if(GPIO_Pin == B1_Pin){
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800182e:	d104      	bne.n	800183a <HAL_GPIO_EXTI_Callback+0x26>
		setTemp += 1;
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 8001838:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == BTN_DOWN_Pin){
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001840:	d10b      	bne.n	800185a <HAL_GPIO_EXTI_Callback+0x46>
		//eventButton = UNFILTERED_PRESSED_DOWN_BUTTON_EVENT;
		setTemp-=1;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3b01      	subs	r3, #1
 8001848:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 800184a:	6013      	str	r3, [r2, #0]

		if(setTemp < 15)
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b0e      	cmp	r3, #14
 8001852:	dc02      	bgt.n	800185a <HAL_GPIO_EXTI_Callback+0x46>
			setTemp = 15;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 8001856:	220f      	movs	r2, #15
 8001858:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == BTN_UP_Pin){
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001860:	d10b      	bne.n	800187a <HAL_GPIO_EXTI_Callback+0x66>
		//eventButton = UNFILTERED_PRESSED_UP_BUTTON_EVENT;
		setTemp+=1;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 800186a:	6013      	str	r3, [r2, #0]

		if(setTemp > 30)
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b1e      	cmp	r3, #30
 8001872:	dd02      	ble.n	800187a <HAL_GPIO_EXTI_Callback+0x66>
			setTemp = 30;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_GPIO_EXTI_Callback+0x74>)
 8001876:	221e      	movs	r2, #30
 8001878:	601a      	str	r2, [r3, #0]
	}
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020000 	.word	0x40020000
 8001888:	20000000 	.word	0x20000000

0800188c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001892:	e7fe      	b.n	8001892 <Error_Handler+0x6>

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018d2:	2007      	movs	r0, #7
 80018d4:	f000 fe40 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_ADC_MspInit+0x7c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d127      	bne.n	8001956 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_ADC_MspInit+0x80>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_ADC_MspInit+0x80>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_ADC_MspInit+0x80>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_ADC_MspInit+0x80>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_ADC_MspInit+0x80>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_ADC_MspInit+0x80>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_THERMISTOR_Pin;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_ADC_MspInit+0x84>)
 8001952:	f000 fe43 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40012000 	.word	0x40012000
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_UART_MspInit+0x84>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12b      	bne.n	80019e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_UART_MspInit+0x88>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_UART_MspInit+0x88>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019c6:	230c      	movs	r3, #12
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d6:	2307      	movs	r3, #7
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_UART_MspInit+0x8c>)
 80019e2:	f000 fdfb 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40004400 	.word	0x40004400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 f8a8 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a58:	f000 ff74 	bl	8002944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a60:	f000 ff70 	bl	8002944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a70:	f000 ff68 	bl	8002944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <SystemInit+0x28>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <SystemInit+0x28>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SystemInit+0x28>)
 8001a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a92:	609a      	str	r2, [r3, #8]
#endif
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aaa:	e003      	b.n	8001ab4 <LoopCopyDataInit>

08001aac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ab2:	3104      	adds	r1, #4

08001ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001abc:	d3f6      	bcc.n	8001aac <CopyDataInit>
  ldr  r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ac0:	e002      	b.n	8001ac8 <LoopFillZerobss>

08001ac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac4:	f842 3b04 	str.w	r3, [r2], #4

08001ac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001acc:	d3f9      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ace:	f7ff ffd3 	bl	8001a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f001 ff81 	bl	80039d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff fccb 	bl	8001470 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001adc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ae0:	08003fdc 	.word	0x08003fdc
  ldr  r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ae8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001aec:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001af0:	200001a0 	.word	0x200001a0

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_Init+0x40>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x40>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x40>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 fd19 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff feb2 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fd31 	bl	80025c2 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 fcf9 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000010 	.word	0x20000010
 8001b98:	2000000c 	.word	0x2000000c

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000010 	.word	0x20000010
 8001bc0:	2000019c 	.word	0x2000019c

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000019c 	.word	0x2000019c

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_Delay+0x40>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000010 	.word	0x20000010

08001c20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e033      	b.n	8001c9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe50 	bl	80018e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d118      	bne.n	8001c90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c66:	f023 0302 	bic.w	r3, r3, #2
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 faa4 	bl	80021c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c8e:	e001      	b.n	8001c94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Start+0x1a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e08a      	b.n	8001dd8 <HAL_ADC_Start+0x130>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d018      	beq.n	8001d0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_ADC_Start+0x13c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3e      	ldr	r2, [pc, #248]	; (8001de8 <HAL_ADC_Start+0x140>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	0c9a      	lsrs	r2, r3, #18
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d15e      	bne.n	8001dd6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d56:	d106      	bne.n	8001d66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	f023 0206 	bic.w	r2, r3, #6
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_ADC_Start+0x144>)
 8001d76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10f      	bne.n	8001dae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11c      	bne.n	8001dd6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e013      	b.n	8001dd6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_ADC_Start+0x148>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d10e      	bne.n	8001dd6 <HAL_ADC_Start+0x12e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dd4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	20000008 	.word	0x20000008
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	40012300 	.word	0x40012300
 8001df0:	40012000 	.word	0x40012000

08001df4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Stop+0x16>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e021      	b.n	8001e4e <HAL_ADC_Stop+0x5a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e76:	d113      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	d10b      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e05c      	b.n	8001f5a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ea0:	f7ff fe90 	bl	8001bc4 <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ea6:	e01a      	b.n	8001ede <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d016      	beq.n	8001ede <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_ADC_PollForConversion+0x6c>
 8001eb6:	f7ff fe85 	bl	8001bc4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d20b      	bcs.n	8001ede <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f043 0204 	orr.w	r2, r3, #4
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e03d      	b.n	8001f5a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d1dd      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0212 	mvn.w	r2, #18
 8001ef4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d123      	bne.n	8001f58 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11f      	bne.n	8001f58 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d111      	bne.n	8001f58 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e105      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x228>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d925      	bls.n	8001ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1e      	subs	r3, #30
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4403      	add	r3, r0
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	e022      	b.n	800203a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	2207      	movs	r2, #7
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	4603      	mov	r3, r0
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4403      	add	r3, r0
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d824      	bhi.n	800208c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b05      	subs	r3, #5
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b05      	subs	r3, #5
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
 800208a:	e04c      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d824      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	3b23      	subs	r3, #35	; 0x23
 80020a6:	221f      	movs	r2, #31
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b23      	subs	r3, #35	; 0x23
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
 80020dc:	e023      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b41      	subs	r3, #65	; 0x41
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b41      	subs	r3, #65	; 0x41
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_ADC_ConfigChannel+0x234>)
 8002128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <HAL_ADC_ConfigChannel+0x238>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d109      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1cc>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d105      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_ADC_ConfigChannel+0x238>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d123      	bne.n	800219a <HAL_ADC_ConfigChannel+0x21e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d003      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x1e6>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b11      	cmp	r3, #17
 8002160:	d11b      	bne.n	800219a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b10      	cmp	r3, #16
 8002174:	d111      	bne.n	800219a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_ADC_ConfigChannel+0x23c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_ADC_ConfigChannel+0x240>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9a      	lsrs	r2, r3, #18
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800218c:	e002      	b.n	8002194 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3b01      	subs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40012300 	.word	0x40012300
 80021b4:	40012000 	.word	0x40012000
 80021b8:	20000008 	.word	0x20000008
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c8:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <ADC_Init+0x1f0>)
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <ADC_Init+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e00f      	b.n	80022be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0202 	bic.w	r2, r2, #2
 80022cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e1b      	ldrb	r3, [r3, #24]
 80022d8:	005a      	lsls	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800230a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	3b01      	subs	r3, #1
 8002318:	035a      	lsls	r2, r3, #13
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e007      	b.n	8002334 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	3b01      	subs	r3, #1
 8002350:	051a      	lsls	r2, r3, #20
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002376:	025a      	lsls	r2, r3, #9
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	029a      	lsls	r2, r3, #10
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40012300 	.word	0x40012300
 80023b4:	0f000001 	.word	0x0f000001

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff29 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff3e 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff31 	bl	800241c <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa2 	bl	8002514 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e159      	b.n	80028ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	f040 8148 	bne.w	80028a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d00b      	beq.n	8002636 <HAL_GPIO_Init+0x5a>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800262a:	2b11      	cmp	r3, #17
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b12      	cmp	r3, #18
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0xfc>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d123      	bne.n	8002720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	08da      	lsrs	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3208      	adds	r2, #8
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	69b9      	ldr	r1, [r7, #24]
 800271c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a2 	beq.w	80028a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <HAL_GPIO_Init+0x2e4>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a55      	ldr	r2, [pc, #340]	; (80028c0 <HAL_GPIO_Init+0x2e4>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_GPIO_Init+0x2e4>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277e:	4a51      	ldr	r2, [pc, #324]	; (80028c4 <HAL_GPIO_Init+0x2e8>)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a48      	ldr	r2, [pc, #288]	; (80028c8 <HAL_GPIO_Init+0x2ec>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d019      	beq.n	80027de <HAL_GPIO_Init+0x202>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a47      	ldr	r2, [pc, #284]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x1fe>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a46      	ldr	r2, [pc, #280]	; (80028d0 <HAL_GPIO_Init+0x2f4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a45      	ldr	r2, [pc, #276]	; (80028d4 <HAL_GPIO_Init+0x2f8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x1f6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a44      	ldr	r2, [pc, #272]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x1f2>
 80027ca:	2304      	movs	r3, #4
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027ce:	2307      	movs	r3, #7
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027de:	2300      	movs	r3, #0
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f0:	4934      	ldr	r1, [pc, #208]	; (80028c4 <HAL_GPIO_Init+0x2e8>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_GPIO_Init+0x300>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002822:	4a2e      	ldr	r2, [pc, #184]	; (80028dc <HAL_GPIO_Init+0x300>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_GPIO_Init+0x300>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_GPIO_Init+0x300>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_GPIO_Init+0x300>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002876:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_GPIO_Init+0x300>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_GPIO_Init+0x300>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_GPIO_Init+0x300>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f67f aea2 	bls.w	80025f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	3724      	adds	r7, #36	; 0x24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40013c00 	.word	0x40013c00

080028e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e001      	b.n	8002902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe ff56 	bl	8001814 <HAL_GPIO_EXTI_Callback>
  }
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e25b      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d075      	beq.n	8002a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002992:	4ba3      	ldr	r3, [pc, #652]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4ba0      	ldr	r3, [pc, #640]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b9d      	ldr	r3, [pc, #628]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b99      	ldr	r3, [pc, #612]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e236      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x74>
 80029da:	4b91      	ldr	r3, [pc, #580]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a90      	ldr	r2, [pc, #576]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x98>
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a8a      	ldr	r2, [pc, #552]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b88      	ldr	r3, [pc, #544]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a87      	ldr	r2, [pc, #540]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 8002a0c:	4b84      	ldr	r3, [pc, #528]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a83      	ldr	r2, [pc, #524]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b81      	ldr	r3, [pc, #516]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a80      	ldr	r2, [pc, #512]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff f8ca 	bl	8001bc4 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7ff f8c6 	bl	8001bc4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1fb      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xc0>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff f8b6 	bl	8001bc4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7ff f8b2 	bl	8001bc4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1e7      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0xe8>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8a:	4b65      	ldr	r3, [pc, #404]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b62      	ldr	r3, [pc, #392]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b5f      	ldr	r3, [pc, #380]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b5c      	ldr	r3, [pc, #368]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1bb      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4952      	ldr	r1, [pc, #328]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_OscConfig+0x2b0>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7ff f86b 	bl	8001bc4 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af2:	f7ff f867 	bl	8001bc4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e19c      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4940      	ldr	r1, [pc, #256]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <HAL_RCC_OscConfig+0x2b0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff f84a 	bl	8001bc4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff f846 	bl	8001bc4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e17b      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d030      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_RCC_OscConfig+0x2b4>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7ff f82a 	bl	8001bc4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b74:	f7ff f826 	bl	8001bc4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e15b      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x200>
 8002b92:	e015      	b.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCC_OscConfig+0x2b4>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7ff f813 	bl	8001bc4 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7ff f80f 	bl	8001bc4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e144      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a0 	beq.w	8002d0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_OscConfig+0x2b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d121      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCC_OscConfig+0x2b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <HAL_RCC_OscConfig+0x2b8>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7fe ffd5 	bl	8001bc4 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e011      	b.n	8002c42 <HAL_RCC_OscConfig+0x2ce>
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	42470000 	.word	0x42470000
 8002c28:	42470e80 	.word	0x42470e80
 8002c2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fe ffc8 	bl	8001bc4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0fd      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <HAL_RCC_OscConfig+0x4d4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2f0>
 8002c56:	4b7d      	ldr	r3, [pc, #500]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a7c      	ldr	r2, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	e01c      	b.n	8002c9e <HAL_RCC_OscConfig+0x32a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x312>
 8002c6c:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a76      	ldr	r2, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	4b74      	ldr	r3, [pc, #464]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a73      	ldr	r2, [pc, #460]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x32a>
 8002c86:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a70      	ldr	r2, [pc, #448]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	4b6e      	ldr	r3, [pc, #440]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a6d      	ldr	r2, [pc, #436]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe ff8d 	bl	8001bc4 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe ff89 	bl	8001bc4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0bc      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ee      	beq.n	8002cae <HAL_RCC_OscConfig+0x33a>
 8002cd0:	e014      	b.n	8002cfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe ff77 	bl	8001bc4 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe ff73 	bl	8001bc4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0a6      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b52      	ldr	r3, [pc, #328]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a51      	ldr	r2, [pc, #324]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8092 	beq.w	8002e3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d18:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d05c      	beq.n	8002dde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d141      	bne.n	8002db0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <HAL_RCC_OscConfig+0x4dc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe ff47 	bl	8001bc4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe ff43 	bl	8001bc4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e078      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4c:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	019b      	lsls	r3, r3, #6
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	3b01      	subs	r3, #1
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	4933      	ldr	r1, [pc, #204]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d82:	4b33      	ldr	r3, [pc, #204]	; (8002e50 <HAL_RCC_OscConfig+0x4dc>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe ff1c 	bl	8001bc4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe ff18 	bl	8001bc4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e04d      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x41c>
 8002dae:	e045      	b.n	8002e3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x4dc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe ff05 	bl	8001bc4 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe ff01 	bl	8001bc4 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e036      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x44a>
 8002ddc:	e02e      	b.n	8002e3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e029      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_RCC_OscConfig+0x4d8>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d115      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e12:	4013      	ands	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10d      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d106      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	42470060 	.word	0x42470060

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0cc      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d90c      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b65      	ldr	r3, [pc, #404]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0b8      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea8:	4b59      	ldr	r3, [pc, #356]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	494d      	ldr	r1, [pc, #308]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d044      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d119      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e07f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e067      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4934      	ldr	r1, [pc, #208]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f44:	f7fe fe3e 	bl	8001bc4 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fe fe3a 	bl	8001bc4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e04f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d20c      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e032      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4916      	ldr	r1, [pc, #88]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	490e      	ldr	r1, [pc, #56]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fda:	f000 f821 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fde:	4601      	mov	r1, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	5cd3      	ldrb	r3, [r2, r3]
 8002fee:	fa21 f303 	lsr.w	r3, r1, r3
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fd9e 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023c00 	.word	0x40023c00
 8003010:	40023800 	.word	0x40023800
 8003014:	08003f88 	.word	0x08003f88
 8003018:	20000008 	.word	0x20000008
 800301c:	2000000c 	.word	0x2000000c

08003020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	2300      	movs	r3, #0
 8003030:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003036:	4b63      	ldr	r3, [pc, #396]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d007      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x32>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d008      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x38>
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 80b4 	bne.w	80031b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b5e      	ldr	r3, [pc, #376]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800304e:	60bb      	str	r3, [r7, #8]
       break;
 8003050:	e0b3      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003052:	4b5e      	ldr	r3, [pc, #376]	; (80031cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003054:	60bb      	str	r3, [r7, #8]
      break;
 8003056:	e0b0      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003058:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003060:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003062:	4b58      	ldr	r3, [pc, #352]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d04a      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	f04f 0400 	mov.w	r4, #0
 8003078:	f240 11ff 	movw	r1, #511	; 0x1ff
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	ea03 0501 	and.w	r5, r3, r1
 8003084:	ea04 0602 	and.w	r6, r4, r2
 8003088:	4629      	mov	r1, r5
 800308a:	4632      	mov	r2, r6
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	f04f 0400 	mov.w	r4, #0
 8003094:	0154      	lsls	r4, r2, #5
 8003096:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800309a:	014b      	lsls	r3, r1, #5
 800309c:	4619      	mov	r1, r3
 800309e:	4622      	mov	r2, r4
 80030a0:	1b49      	subs	r1, r1, r5
 80030a2:	eb62 0206 	sbc.w	r2, r2, r6
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	0194      	lsls	r4, r2, #6
 80030b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030b4:	018b      	lsls	r3, r1, #6
 80030b6:	1a5b      	subs	r3, r3, r1
 80030b8:	eb64 0402 	sbc.w	r4, r4, r2
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	00e2      	lsls	r2, r4, #3
 80030c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030ca:	00d9      	lsls	r1, r3, #3
 80030cc:	460b      	mov	r3, r1
 80030ce:	4614      	mov	r4, r2
 80030d0:	195b      	adds	r3, r3, r5
 80030d2:	eb44 0406 	adc.w	r4, r4, r6
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	0262      	lsls	r2, r4, #9
 80030e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030e4:	0259      	lsls	r1, r3, #9
 80030e6:	460b      	mov	r3, r1
 80030e8:	4614      	mov	r4, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	4621      	mov	r1, r4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f04f 0400 	mov.w	r4, #0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	f7fd fd0a 	bl	8000b10 <__aeabi_uldivmod>
 80030fc:	4603      	mov	r3, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e049      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003104:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	f04f 0400 	mov.w	r4, #0
 800310e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	ea03 0501 	and.w	r5, r3, r1
 800311a:	ea04 0602 	and.w	r6, r4, r2
 800311e:	4629      	mov	r1, r5
 8003120:	4632      	mov	r2, r6
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	f04f 0400 	mov.w	r4, #0
 800312a:	0154      	lsls	r4, r2, #5
 800312c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003130:	014b      	lsls	r3, r1, #5
 8003132:	4619      	mov	r1, r3
 8003134:	4622      	mov	r2, r4
 8003136:	1b49      	subs	r1, r1, r5
 8003138:	eb62 0206 	sbc.w	r2, r2, r6
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	f04f 0400 	mov.w	r4, #0
 8003144:	0194      	lsls	r4, r2, #6
 8003146:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800314a:	018b      	lsls	r3, r1, #6
 800314c:	1a5b      	subs	r3, r3, r1
 800314e:	eb64 0402 	sbc.w	r4, r4, r2
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	00e2      	lsls	r2, r4, #3
 800315c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003160:	00d9      	lsls	r1, r3, #3
 8003162:	460b      	mov	r3, r1
 8003164:	4614      	mov	r4, r2
 8003166:	195b      	adds	r3, r3, r5
 8003168:	eb44 0406 	adc.w	r4, r4, r6
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	02a2      	lsls	r2, r4, #10
 8003176:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800317a:	0299      	lsls	r1, r3, #10
 800317c:	460b      	mov	r3, r1
 800317e:	4614      	mov	r4, r2
 8003180:	4618      	mov	r0, r3
 8003182:	4621      	mov	r1, r4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f04f 0400 	mov.w	r4, #0
 800318a:	461a      	mov	r2, r3
 800318c:	4623      	mov	r3, r4
 800318e:	f7fd fcbf 	bl	8000b10 <__aeabi_uldivmod>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	3301      	adds	r3, #1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	60bb      	str	r3, [r7, #8]
      break;
 80031b2:	e002      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031b6:	60bb      	str	r3, [r7, #8]
      break;
 80031b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ba:	68bb      	ldr	r3, [r7, #8]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000008 	.word	0x20000008

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031f0:	4601      	mov	r1, r0
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4a03      	ldr	r2, [pc, #12]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	08003f98 	.word	0x08003f98

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003214:	f7ff ffdc 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003218:	4601      	mov	r1, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0b5b      	lsrs	r3, r3, #13
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4a03      	ldr	r2, [pc, #12]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	fa21 f303 	lsr.w	r3, r1, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	08003f98 	.word	0x08003f98

08003238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e03f      	b.n	80032ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fb84 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2224      	movs	r2, #36	; 0x24
 8003268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800327a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f829 	bl	80032d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003316:	f023 030c 	bic.w	r3, r3, #12
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003342:	f040 818b 	bne.w	800365c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4ac1      	ldr	r2, [pc, #772]	; (8003650 <UART_SetConfig+0x37c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d005      	beq.n	800335c <UART_SetConfig+0x88>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4abf      	ldr	r2, [pc, #764]	; (8003654 <UART_SetConfig+0x380>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f040 80bd 	bne.w	80034d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800335c:	f7ff ff58 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8003360:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	461d      	mov	r5, r3
 8003366:	f04f 0600 	mov.w	r6, #0
 800336a:	46a8      	mov	r8, r5
 800336c:	46b1      	mov	r9, r6
 800336e:	eb18 0308 	adds.w	r3, r8, r8
 8003372:	eb49 0409 	adc.w	r4, r9, r9
 8003376:	4698      	mov	r8, r3
 8003378:	46a1      	mov	r9, r4
 800337a:	eb18 0805 	adds.w	r8, r8, r5
 800337e:	eb49 0906 	adc.w	r9, r9, r6
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800338e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003392:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003396:	4688      	mov	r8, r1
 8003398:	4691      	mov	r9, r2
 800339a:	eb18 0005 	adds.w	r0, r8, r5
 800339e:	eb49 0106 	adc.w	r1, r9, r6
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	461d      	mov	r5, r3
 80033a8:	f04f 0600 	mov.w	r6, #0
 80033ac:	196b      	adds	r3, r5, r5
 80033ae:	eb46 0406 	adc.w	r4, r6, r6
 80033b2:	461a      	mov	r2, r3
 80033b4:	4623      	mov	r3, r4
 80033b6:	f7fd fbab 	bl	8000b10 <__aeabi_uldivmod>
 80033ba:	4603      	mov	r3, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	461a      	mov	r2, r3
 80033c0:	4ba5      	ldr	r3, [pc, #660]	; (8003658 <UART_SetConfig+0x384>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	461d      	mov	r5, r3
 80033d0:	f04f 0600 	mov.w	r6, #0
 80033d4:	46a9      	mov	r9, r5
 80033d6:	46b2      	mov	sl, r6
 80033d8:	eb19 0309 	adds.w	r3, r9, r9
 80033dc:	eb4a 040a 	adc.w	r4, sl, sl
 80033e0:	4699      	mov	r9, r3
 80033e2:	46a2      	mov	sl, r4
 80033e4:	eb19 0905 	adds.w	r9, r9, r5
 80033e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003400:	4689      	mov	r9, r1
 8003402:	4692      	mov	sl, r2
 8003404:	eb19 0005 	adds.w	r0, r9, r5
 8003408:	eb4a 0106 	adc.w	r1, sl, r6
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	461d      	mov	r5, r3
 8003412:	f04f 0600 	mov.w	r6, #0
 8003416:	196b      	adds	r3, r5, r5
 8003418:	eb46 0406 	adc.w	r4, r6, r6
 800341c:	461a      	mov	r2, r3
 800341e:	4623      	mov	r3, r4
 8003420:	f7fd fb76 	bl	8000b10 <__aeabi_uldivmod>
 8003424:	4603      	mov	r3, r0
 8003426:	460c      	mov	r4, r1
 8003428:	461a      	mov	r2, r3
 800342a:	4b8b      	ldr	r3, [pc, #556]	; (8003658 <UART_SetConfig+0x384>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	; 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a86      	ldr	r2, [pc, #536]	; (8003658 <UART_SetConfig+0x384>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800344c:	4498      	add	r8, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	461d      	mov	r5, r3
 8003452:	f04f 0600 	mov.w	r6, #0
 8003456:	46a9      	mov	r9, r5
 8003458:	46b2      	mov	sl, r6
 800345a:	eb19 0309 	adds.w	r3, r9, r9
 800345e:	eb4a 040a 	adc.w	r4, sl, sl
 8003462:	4699      	mov	r9, r3
 8003464:	46a2      	mov	sl, r4
 8003466:	eb19 0905 	adds.w	r9, r9, r5
 800346a:	eb4a 0a06 	adc.w	sl, sl, r6
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800347a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800347e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003482:	4689      	mov	r9, r1
 8003484:	4692      	mov	sl, r2
 8003486:	eb19 0005 	adds.w	r0, r9, r5
 800348a:	eb4a 0106 	adc.w	r1, sl, r6
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	461d      	mov	r5, r3
 8003494:	f04f 0600 	mov.w	r6, #0
 8003498:	196b      	adds	r3, r5, r5
 800349a:	eb46 0406 	adc.w	r4, r6, r6
 800349e:	461a      	mov	r2, r3
 80034a0:	4623      	mov	r3, r4
 80034a2:	f7fd fb35 	bl	8000b10 <__aeabi_uldivmod>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <UART_SetConfig+0x384>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2164      	movs	r1, #100	; 0x64
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	3332      	adds	r3, #50	; 0x32
 80034c0:	4a65      	ldr	r2, [pc, #404]	; (8003658 <UART_SetConfig+0x384>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	f003 0207 	and.w	r2, r3, #7
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4442      	add	r2, r8
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	e26f      	b.n	80039b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034d6:	f7ff fe87 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 80034da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	461d      	mov	r5, r3
 80034e0:	f04f 0600 	mov.w	r6, #0
 80034e4:	46a8      	mov	r8, r5
 80034e6:	46b1      	mov	r9, r6
 80034e8:	eb18 0308 	adds.w	r3, r8, r8
 80034ec:	eb49 0409 	adc.w	r4, r9, r9
 80034f0:	4698      	mov	r8, r3
 80034f2:	46a1      	mov	r9, r4
 80034f4:	eb18 0805 	adds.w	r8, r8, r5
 80034f8:	eb49 0906 	adc.w	r9, r9, r6
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003508:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800350c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003510:	4688      	mov	r8, r1
 8003512:	4691      	mov	r9, r2
 8003514:	eb18 0005 	adds.w	r0, r8, r5
 8003518:	eb49 0106 	adc.w	r1, r9, r6
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	461d      	mov	r5, r3
 8003522:	f04f 0600 	mov.w	r6, #0
 8003526:	196b      	adds	r3, r5, r5
 8003528:	eb46 0406 	adc.w	r4, r6, r6
 800352c:	461a      	mov	r2, r3
 800352e:	4623      	mov	r3, r4
 8003530:	f7fd faee 	bl	8000b10 <__aeabi_uldivmod>
 8003534:	4603      	mov	r3, r0
 8003536:	460c      	mov	r4, r1
 8003538:	461a      	mov	r2, r3
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <UART_SetConfig+0x384>)
 800353c:	fba3 2302 	umull	r2, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	461d      	mov	r5, r3
 800354a:	f04f 0600 	mov.w	r6, #0
 800354e:	46a9      	mov	r9, r5
 8003550:	46b2      	mov	sl, r6
 8003552:	eb19 0309 	adds.w	r3, r9, r9
 8003556:	eb4a 040a 	adc.w	r4, sl, sl
 800355a:	4699      	mov	r9, r3
 800355c:	46a2      	mov	sl, r4
 800355e:	eb19 0905 	adds.w	r9, r9, r5
 8003562:	eb4a 0a06 	adc.w	sl, sl, r6
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800357a:	4689      	mov	r9, r1
 800357c:	4692      	mov	sl, r2
 800357e:	eb19 0005 	adds.w	r0, r9, r5
 8003582:	eb4a 0106 	adc.w	r1, sl, r6
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	461d      	mov	r5, r3
 800358c:	f04f 0600 	mov.w	r6, #0
 8003590:	196b      	adds	r3, r5, r5
 8003592:	eb46 0406 	adc.w	r4, r6, r6
 8003596:	461a      	mov	r2, r3
 8003598:	4623      	mov	r3, r4
 800359a:	f7fd fab9 	bl	8000b10 <__aeabi_uldivmod>
 800359e:	4603      	mov	r3, r0
 80035a0:	460c      	mov	r4, r1
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <UART_SetConfig+0x384>)
 80035a6:	fba3 1302 	umull	r1, r3, r3, r2
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2164      	movs	r1, #100	; 0x64
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	3332      	adds	r3, #50	; 0x32
 80035b8:	4a27      	ldr	r2, [pc, #156]	; (8003658 <UART_SetConfig+0x384>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035c6:	4498      	add	r8, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	461d      	mov	r5, r3
 80035cc:	f04f 0600 	mov.w	r6, #0
 80035d0:	46a9      	mov	r9, r5
 80035d2:	46b2      	mov	sl, r6
 80035d4:	eb19 0309 	adds.w	r3, r9, r9
 80035d8:	eb4a 040a 	adc.w	r4, sl, sl
 80035dc:	4699      	mov	r9, r3
 80035de:	46a2      	mov	sl, r4
 80035e0:	eb19 0905 	adds.w	r9, r9, r5
 80035e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035fc:	4689      	mov	r9, r1
 80035fe:	4692      	mov	sl, r2
 8003600:	eb19 0005 	adds.w	r0, r9, r5
 8003604:	eb4a 0106 	adc.w	r1, sl, r6
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	461d      	mov	r5, r3
 800360e:	f04f 0600 	mov.w	r6, #0
 8003612:	196b      	adds	r3, r5, r5
 8003614:	eb46 0406 	adc.w	r4, r6, r6
 8003618:	461a      	mov	r2, r3
 800361a:	4623      	mov	r3, r4
 800361c:	f7fd fa78 	bl	8000b10 <__aeabi_uldivmod>
 8003620:	4603      	mov	r3, r0
 8003622:	460c      	mov	r4, r1
 8003624:	461a      	mov	r2, r3
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <UART_SetConfig+0x384>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	3332      	adds	r3, #50	; 0x32
 800363a:	4a07      	ldr	r2, [pc, #28]	; (8003658 <UART_SetConfig+0x384>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 0207 	and.w	r2, r3, #7
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4442      	add	r2, r8
 800364c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800364e:	e1b2      	b.n	80039b6 <UART_SetConfig+0x6e2>
 8003650:	40011000 	.word	0x40011000
 8003654:	40011400 	.word	0x40011400
 8003658:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4ad7      	ldr	r2, [pc, #860]	; (80039c0 <UART_SetConfig+0x6ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d005      	beq.n	8003672 <UART_SetConfig+0x39e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4ad6      	ldr	r2, [pc, #856]	; (80039c4 <UART_SetConfig+0x6f0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	f040 80d1 	bne.w	8003814 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003672:	f7ff fdcd 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8003676:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	469a      	mov	sl, r3
 800367c:	f04f 0b00 	mov.w	fp, #0
 8003680:	46d0      	mov	r8, sl
 8003682:	46d9      	mov	r9, fp
 8003684:	eb18 0308 	adds.w	r3, r8, r8
 8003688:	eb49 0409 	adc.w	r4, r9, r9
 800368c:	4698      	mov	r8, r3
 800368e:	46a1      	mov	r9, r4
 8003690:	eb18 080a 	adds.w	r8, r8, sl
 8003694:	eb49 090b 	adc.w	r9, r9, fp
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036ac:	4688      	mov	r8, r1
 80036ae:	4691      	mov	r9, r2
 80036b0:	eb1a 0508 	adds.w	r5, sl, r8
 80036b4:	eb4b 0609 	adc.w	r6, fp, r9
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4619      	mov	r1, r3
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	f04f 0400 	mov.w	r4, #0
 80036ca:	0094      	lsls	r4, r2, #2
 80036cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d0:	008b      	lsls	r3, r1, #2
 80036d2:	461a      	mov	r2, r3
 80036d4:	4623      	mov	r3, r4
 80036d6:	4628      	mov	r0, r5
 80036d8:	4631      	mov	r1, r6
 80036da:	f7fd fa19 	bl	8000b10 <__aeabi_uldivmod>
 80036de:	4603      	mov	r3, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	461a      	mov	r2, r3
 80036e4:	4bb8      	ldr	r3, [pc, #736]	; (80039c8 <UART_SetConfig+0x6f4>)
 80036e6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	469b      	mov	fp, r3
 80036f4:	f04f 0c00 	mov.w	ip, #0
 80036f8:	46d9      	mov	r9, fp
 80036fa:	46e2      	mov	sl, ip
 80036fc:	eb19 0309 	adds.w	r3, r9, r9
 8003700:	eb4a 040a 	adc.w	r4, sl, sl
 8003704:	4699      	mov	r9, r3
 8003706:	46a2      	mov	sl, r4
 8003708:	eb19 090b 	adds.w	r9, r9, fp
 800370c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800371c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003720:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003724:	4689      	mov	r9, r1
 8003726:	4692      	mov	sl, r2
 8003728:	eb1b 0509 	adds.w	r5, fp, r9
 800372c:	eb4c 060a 	adc.w	r6, ip, sl
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4619      	mov	r1, r3
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	0094      	lsls	r4, r2, #2
 8003744:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003748:	008b      	lsls	r3, r1, #2
 800374a:	461a      	mov	r2, r3
 800374c:	4623      	mov	r3, r4
 800374e:	4628      	mov	r0, r5
 8003750:	4631      	mov	r1, r6
 8003752:	f7fd f9dd 	bl	8000b10 <__aeabi_uldivmod>
 8003756:	4603      	mov	r3, r0
 8003758:	460c      	mov	r4, r1
 800375a:	461a      	mov	r2, r3
 800375c:	4b9a      	ldr	r3, [pc, #616]	; (80039c8 <UART_SetConfig+0x6f4>)
 800375e:	fba3 1302 	umull	r1, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2164      	movs	r1, #100	; 0x64
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a95      	ldr	r2, [pc, #596]	; (80039c8 <UART_SetConfig+0x6f4>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377c:	4498      	add	r8, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	469b      	mov	fp, r3
 8003782:	f04f 0c00 	mov.w	ip, #0
 8003786:	46d9      	mov	r9, fp
 8003788:	46e2      	mov	sl, ip
 800378a:	eb19 0309 	adds.w	r3, r9, r9
 800378e:	eb4a 040a 	adc.w	r4, sl, sl
 8003792:	4699      	mov	r9, r3
 8003794:	46a2      	mov	sl, r4
 8003796:	eb19 090b 	adds.w	r9, r9, fp
 800379a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b2:	4689      	mov	r9, r1
 80037b4:	4692      	mov	sl, r2
 80037b6:	eb1b 0509 	adds.w	r5, fp, r9
 80037ba:	eb4c 060a 	adc.w	r6, ip, sl
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4619      	mov	r1, r3
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	f04f 0400 	mov.w	r4, #0
 80037d0:	0094      	lsls	r4, r2, #2
 80037d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037d6:	008b      	lsls	r3, r1, #2
 80037d8:	461a      	mov	r2, r3
 80037da:	4623      	mov	r3, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	4631      	mov	r1, r6
 80037e0:	f7fd f996 	bl	8000b10 <__aeabi_uldivmod>
 80037e4:	4603      	mov	r3, r0
 80037e6:	460c      	mov	r4, r1
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b77      	ldr	r3, [pc, #476]	; (80039c8 <UART_SetConfig+0x6f4>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2164      	movs	r1, #100	; 0x64
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	3332      	adds	r3, #50	; 0x32
 80037fe:	4a72      	ldr	r2, [pc, #456]	; (80039c8 <UART_SetConfig+0x6f4>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4442      	add	r2, r8
 8003810:	609a      	str	r2, [r3, #8]
 8003812:	e0d0      	b.n	80039b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7ff fce8 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003818:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	469a      	mov	sl, r3
 800381e:	f04f 0b00 	mov.w	fp, #0
 8003822:	46d0      	mov	r8, sl
 8003824:	46d9      	mov	r9, fp
 8003826:	eb18 0308 	adds.w	r3, r8, r8
 800382a:	eb49 0409 	adc.w	r4, r9, r9
 800382e:	4698      	mov	r8, r3
 8003830:	46a1      	mov	r9, r4
 8003832:	eb18 080a 	adds.w	r8, r8, sl
 8003836:	eb49 090b 	adc.w	r9, r9, fp
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003846:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800384a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800384e:	4688      	mov	r8, r1
 8003850:	4691      	mov	r9, r2
 8003852:	eb1a 0508 	adds.w	r5, sl, r8
 8003856:	eb4b 0609 	adc.w	r6, fp, r9
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4619      	mov	r1, r3
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	f04f 0400 	mov.w	r4, #0
 800386c:	0094      	lsls	r4, r2, #2
 800386e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003872:	008b      	lsls	r3, r1, #2
 8003874:	461a      	mov	r2, r3
 8003876:	4623      	mov	r3, r4
 8003878:	4628      	mov	r0, r5
 800387a:	4631      	mov	r1, r6
 800387c:	f7fd f948 	bl	8000b10 <__aeabi_uldivmod>
 8003880:	4603      	mov	r3, r0
 8003882:	460c      	mov	r4, r1
 8003884:	461a      	mov	r2, r3
 8003886:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <UART_SetConfig+0x6f4>)
 8003888:	fba3 2302 	umull	r2, r3, r3, r2
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	469b      	mov	fp, r3
 8003896:	f04f 0c00 	mov.w	ip, #0
 800389a:	46d9      	mov	r9, fp
 800389c:	46e2      	mov	sl, ip
 800389e:	eb19 0309 	adds.w	r3, r9, r9
 80038a2:	eb4a 040a 	adc.w	r4, sl, sl
 80038a6:	4699      	mov	r9, r3
 80038a8:	46a2      	mov	sl, r4
 80038aa:	eb19 090b 	adds.w	r9, r9, fp
 80038ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038c6:	4689      	mov	r9, r1
 80038c8:	4692      	mov	sl, r2
 80038ca:	eb1b 0509 	adds.w	r5, fp, r9
 80038ce:	eb4c 060a 	adc.w	r6, ip, sl
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4619      	mov	r1, r3
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	f04f 0400 	mov.w	r4, #0
 80038e4:	0094      	lsls	r4, r2, #2
 80038e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038ea:	008b      	lsls	r3, r1, #2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4623      	mov	r3, r4
 80038f0:	4628      	mov	r0, r5
 80038f2:	4631      	mov	r1, r6
 80038f4:	f7fd f90c 	bl	8000b10 <__aeabi_uldivmod>
 80038f8:	4603      	mov	r3, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <UART_SetConfig+0x6f4>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	; 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	3332      	adds	r3, #50	; 0x32
 8003912:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <UART_SetConfig+0x6f4>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800391e:	4498      	add	r8, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	469b      	mov	fp, r3
 8003924:	f04f 0c00 	mov.w	ip, #0
 8003928:	46d9      	mov	r9, fp
 800392a:	46e2      	mov	sl, ip
 800392c:	eb19 0309 	adds.w	r3, r9, r9
 8003930:	eb4a 040a 	adc.w	r4, sl, sl
 8003934:	4699      	mov	r9, r3
 8003936:	46a2      	mov	sl, r4
 8003938:	eb19 090b 	adds.w	r9, r9, fp
 800393c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800394c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003950:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003954:	4689      	mov	r9, r1
 8003956:	4692      	mov	sl, r2
 8003958:	eb1b 0509 	adds.w	r5, fp, r9
 800395c:	eb4c 060a 	adc.w	r6, ip, sl
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4619      	mov	r1, r3
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	f04f 0400 	mov.w	r4, #0
 8003972:	0094      	lsls	r4, r2, #2
 8003974:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003978:	008b      	lsls	r3, r1, #2
 800397a:	461a      	mov	r2, r3
 800397c:	4623      	mov	r3, r4
 800397e:	4628      	mov	r0, r5
 8003980:	4631      	mov	r1, r6
 8003982:	f7fd f8c5 	bl	8000b10 <__aeabi_uldivmod>
 8003986:	4603      	mov	r3, r0
 8003988:	460c      	mov	r4, r1
 800398a:	461a      	mov	r2, r3
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <UART_SetConfig+0x6f4>)
 800398e:	fba3 1302 	umull	r1, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2164      	movs	r1, #100	; 0x64
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	3332      	adds	r3, #50	; 0x32
 80039a0:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <UART_SetConfig+0x6f4>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	f003 020f 	and.w	r2, r3, #15
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4442      	add	r2, r8
 80039b2:	609a      	str	r2, [r3, #8]
}
 80039b4:	e7ff      	b.n	80039b6 <UART_SetConfig+0x6e2>
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c0:	40011000 	.word	0x40011000
 80039c4:	40011400 	.word	0x40011400
 80039c8:	51eb851f 	.word	0x51eb851f

080039cc <__errno>:
 80039cc:	4b01      	ldr	r3, [pc, #4]	; (80039d4 <__errno+0x8>)
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000014 	.word	0x20000014

080039d8 <__libc_init_array>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	4e0d      	ldr	r6, [pc, #52]	; (8003a10 <__libc_init_array+0x38>)
 80039dc:	4c0d      	ldr	r4, [pc, #52]	; (8003a14 <__libc_init_array+0x3c>)
 80039de:	1ba4      	subs	r4, r4, r6
 80039e0:	10a4      	asrs	r4, r4, #2
 80039e2:	2500      	movs	r5, #0
 80039e4:	42a5      	cmp	r5, r4
 80039e6:	d109      	bne.n	80039fc <__libc_init_array+0x24>
 80039e8:	4e0b      	ldr	r6, [pc, #44]	; (8003a18 <__libc_init_array+0x40>)
 80039ea:	4c0c      	ldr	r4, [pc, #48]	; (8003a1c <__libc_init_array+0x44>)
 80039ec:	f000 fab4 	bl	8003f58 <_init>
 80039f0:	1ba4      	subs	r4, r4, r6
 80039f2:	10a4      	asrs	r4, r4, #2
 80039f4:	2500      	movs	r5, #0
 80039f6:	42a5      	cmp	r5, r4
 80039f8:	d105      	bne.n	8003a06 <__libc_init_array+0x2e>
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a00:	4798      	blx	r3
 8003a02:	3501      	adds	r5, #1
 8003a04:	e7ee      	b.n	80039e4 <__libc_init_array+0xc>
 8003a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a0a:	4798      	blx	r3
 8003a0c:	3501      	adds	r5, #1
 8003a0e:	e7f2      	b.n	80039f6 <__libc_init_array+0x1e>
 8003a10:	08003fd4 	.word	0x08003fd4
 8003a14:	08003fd4 	.word	0x08003fd4
 8003a18:	08003fd4 	.word	0x08003fd4
 8003a1c:	08003fd8 	.word	0x08003fd8

08003a20 <__itoa>:
 8003a20:	1e93      	subs	r3, r2, #2
 8003a22:	2b22      	cmp	r3, #34	; 0x22
 8003a24:	b510      	push	{r4, lr}
 8003a26:	460c      	mov	r4, r1
 8003a28:	d904      	bls.n	8003a34 <__itoa+0x14>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	700b      	strb	r3, [r1, #0]
 8003a2e:	461c      	mov	r4, r3
 8003a30:	4620      	mov	r0, r4
 8003a32:	bd10      	pop	{r4, pc}
 8003a34:	2a0a      	cmp	r2, #10
 8003a36:	d109      	bne.n	8003a4c <__itoa+0x2c>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	da07      	bge.n	8003a4c <__itoa+0x2c>
 8003a3c:	232d      	movs	r3, #45	; 0x2d
 8003a3e:	700b      	strb	r3, [r1, #0]
 8003a40:	4240      	negs	r0, r0
 8003a42:	2101      	movs	r1, #1
 8003a44:	4421      	add	r1, r4
 8003a46:	f000 f80d 	bl	8003a64 <__utoa>
 8003a4a:	e7f1      	b.n	8003a30 <__itoa+0x10>
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	e7f9      	b.n	8003a44 <__itoa+0x24>

08003a50 <itoa>:
 8003a50:	f7ff bfe6 	b.w	8003a20 <__itoa>

08003a54 <memset>:
 8003a54:	4402      	add	r2, r0
 8003a56:	4603      	mov	r3, r0
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <memset+0xa>
 8003a5c:	4770      	bx	lr
 8003a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a62:	e7f9      	b.n	8003a58 <memset+0x4>

08003a64 <__utoa>:
 8003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <__utoa+0x78>)
 8003a68:	b08b      	sub	sp, #44	; 0x2c
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	466e      	mov	r6, sp
 8003a70:	f103 0c20 	add.w	ip, r3, #32
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	4637      	mov	r7, r6
 8003a7a:	c703      	stmia	r7!, {r0, r1}
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	4563      	cmp	r3, ip
 8003a80:	463e      	mov	r6, r7
 8003a82:	d1f7      	bne.n	8003a74 <__utoa+0x10>
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	713b      	strb	r3, [r7, #4]
 8003a8a:	1e93      	subs	r3, r2, #2
 8003a8c:	2b22      	cmp	r3, #34	; 0x22
 8003a8e:	6038      	str	r0, [r7, #0]
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	d904      	bls.n	8003aa0 <__utoa+0x3c>
 8003a96:	7023      	strb	r3, [r4, #0]
 8003a98:	461c      	mov	r4, r3
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	b00b      	add	sp, #44	; 0x2c
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa0:	1e66      	subs	r6, r4, #1
 8003aa2:	fbb5 f0f2 	udiv	r0, r5, r2
 8003aa6:	af0a      	add	r7, sp, #40	; 0x28
 8003aa8:	fb02 5510 	mls	r5, r2, r0, r5
 8003aac:	443d      	add	r5, r7
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003ab4:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b968      	cbnz	r0, 8003ad8 <__utoa+0x74>
 8003abc:	5460      	strb	r0, [r4, r1]
 8003abe:	4423      	add	r3, r4
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	1b19      	subs	r1, r3, r4
 8003ac4:	1b10      	subs	r0, r2, r4
 8003ac6:	4281      	cmp	r1, r0
 8003ac8:	dde7      	ble.n	8003a9a <__utoa+0x36>
 8003aca:	7811      	ldrb	r1, [r2, #0]
 8003acc:	7818      	ldrb	r0, [r3, #0]
 8003ace:	f802 0b01 	strb.w	r0, [r2], #1
 8003ad2:	f803 1901 	strb.w	r1, [r3], #-1
 8003ad6:	e7f4      	b.n	8003ac2 <__utoa+0x5e>
 8003ad8:	460b      	mov	r3, r1
 8003ada:	e7e2      	b.n	8003aa2 <__utoa+0x3e>
 8003adc:	08003fa0 	.word	0x08003fa0

08003ae0 <log>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	ed2d 8b02 	vpush	{d8}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	ec55 4b10 	vmov	r4, r5, d0
 8003aec:	f000 f878 	bl	8003be0 <__ieee754_log>
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <log+0xec>)
 8003af2:	eeb0 8a40 	vmov.f32	s16, s0
 8003af6:	eef0 8a60 	vmov.f32	s17, s1
 8003afa:	f993 6000 	ldrsb.w	r6, [r3]
 8003afe:	1c73      	adds	r3, r6, #1
 8003b00:	d05b      	beq.n	8003bba <log+0xda>
 8003b02:	4622      	mov	r2, r4
 8003b04:	462b      	mov	r3, r5
 8003b06:	4620      	mov	r0, r4
 8003b08:	4629      	mov	r1, r5
 8003b0a:	f7fc ffc3 	bl	8000a94 <__aeabi_dcmpun>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d153      	bne.n	8003bba <log+0xda>
 8003b12:	2200      	movs	r2, #0
 8003b14:	2300      	movs	r3, #0
 8003b16:	4620      	mov	r0, r4
 8003b18:	4629      	mov	r1, r5
 8003b1a:	f7fc ffb1 	bl	8000a80 <__aeabi_dcmpgt>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d14b      	bne.n	8003bba <log+0xda>
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <log+0xf0>)
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	9008      	str	r0, [sp, #32]
 8003b28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003b2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003b30:	b9a6      	cbnz	r6, 8003b5c <log+0x7c>
 8003b32:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <log+0xf4>)
 8003b34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2300      	movs	r3, #0
 8003b42:	4629      	mov	r1, r5
 8003b44:	f7fc ff74 	bl	8000a30 <__aeabi_dcmpeq>
 8003b48:	bb40      	cbnz	r0, 8003b9c <log+0xbc>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	2e02      	cmp	r6, #2
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	d119      	bne.n	8003b86 <log+0xa6>
 8003b52:	f7ff ff3b 	bl	80039cc <__errno>
 8003b56:	2321      	movs	r3, #33	; 0x21
 8003b58:	6003      	str	r3, [r0, #0]
 8003b5a:	e019      	b.n	8003b90 <log+0xb0>
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <log+0xf8>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b64:	4620      	mov	r0, r4
 8003b66:	2200      	movs	r2, #0
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f7fc ff60 	bl	8000a30 <__aeabi_dcmpeq>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d0ea      	beq.n	8003b4a <log+0x6a>
 8003b74:	2302      	movs	r3, #2
 8003b76:	429e      	cmp	r6, r3
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	d111      	bne.n	8003ba0 <log+0xc0>
 8003b7c:	f7ff ff26 	bl	80039cc <__errno>
 8003b80:	2322      	movs	r3, #34	; 0x22
 8003b82:	6003      	str	r3, [r0, #0]
 8003b84:	e011      	b.n	8003baa <log+0xca>
 8003b86:	4668      	mov	r0, sp
 8003b88:	f000 f9dc 	bl	8003f44 <matherr>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d0e0      	beq.n	8003b52 <log+0x72>
 8003b90:	4812      	ldr	r0, [pc, #72]	; (8003bdc <log+0xfc>)
 8003b92:	f000 f9d9 	bl	8003f48 <nan>
 8003b96:	ed8d 0b06 	vstr	d0, [sp, #24]
 8003b9a:	e006      	b.n	8003baa <log+0xca>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4668      	mov	r0, sp
 8003ba2:	f000 f9cf 	bl	8003f44 <matherr>
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d0e8      	beq.n	8003b7c <log+0x9c>
 8003baa:	9b08      	ldr	r3, [sp, #32]
 8003bac:	b11b      	cbz	r3, 8003bb6 <log+0xd6>
 8003bae:	f7ff ff0d 	bl	80039cc <__errno>
 8003bb2:	9b08      	ldr	r3, [sp, #32]
 8003bb4:	6003      	str	r3, [r0, #0]
 8003bb6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8003bba:	eeb0 0a48 	vmov.f32	s0, s16
 8003bbe:	eef0 0a68 	vmov.f32	s1, s17
 8003bc2:	b00a      	add	sp, #40	; 0x28
 8003bc4:	ecbd 8b02 	vpop	{d8}
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000078 	.word	0x20000078
 8003bd0:	08003fc5 	.word	0x08003fc5
 8003bd4:	c7efffff 	.word	0xc7efffff
 8003bd8:	fff00000 	.word	0xfff00000
 8003bdc:	08003fc8 	.word	0x08003fc8

08003be0 <__ieee754_log>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	ec51 0b10 	vmov	r0, r1, d0
 8003be8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003bec:	b087      	sub	sp, #28
 8003bee:	460d      	mov	r5, r1
 8003bf0:	da27      	bge.n	8003c42 <__ieee754_log+0x62>
 8003bf2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bf6:	4303      	orrs	r3, r0
 8003bf8:	ee10 2a10 	vmov	r2, s0
 8003bfc:	d10a      	bne.n	8003c14 <__ieee754_log+0x34>
 8003bfe:	49cc      	ldr	r1, [pc, #816]	; (8003f30 <__ieee754_log+0x350>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	2300      	movs	r3, #0
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7fc fdd5 	bl	80007b4 <__aeabi_ddiv>
 8003c0a:	ec41 0b10 	vmov	d0, r0, r1
 8003c0e:	b007      	add	sp, #28
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c14:	2900      	cmp	r1, #0
 8003c16:	da05      	bge.n	8003c24 <__ieee754_log+0x44>
 8003c18:	460b      	mov	r3, r1
 8003c1a:	f7fc fae9 	bl	80001f0 <__aeabi_dsub>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2300      	movs	r3, #0
 8003c22:	e7f0      	b.n	8003c06 <__ieee754_log+0x26>
 8003c24:	4bc3      	ldr	r3, [pc, #780]	; (8003f34 <__ieee754_log+0x354>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	f7fc fc9a 	bl	8000560 <__aeabi_dmul>
 8003c2c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003c30:	460d      	mov	r5, r1
 8003c32:	4ac1      	ldr	r2, [pc, #772]	; (8003f38 <__ieee754_log+0x358>)
 8003c34:	4295      	cmp	r5, r2
 8003c36:	dd06      	ble.n	8003c46 <__ieee754_log+0x66>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	f7fc fada 	bl	80001f4 <__adddf3>
 8003c40:	e7e3      	b.n	8003c0a <__ieee754_log+0x2a>
 8003c42:	2300      	movs	r3, #0
 8003c44:	e7f5      	b.n	8003c32 <__ieee754_log+0x52>
 8003c46:	152c      	asrs	r4, r5, #20
 8003c48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003c4c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003c50:	441c      	add	r4, r3
 8003c52:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8003c56:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8003c62:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8003c66:	ea42 0105 	orr.w	r1, r2, r5
 8003c6a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4bb2      	ldr	r3, [pc, #712]	; (8003f3c <__ieee754_log+0x35c>)
 8003c72:	f7fc fabd 	bl	80001f0 <__aeabi_dsub>
 8003c76:	1cab      	adds	r3, r5, #2
 8003c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	4682      	mov	sl, r0
 8003c80:	468b      	mov	fp, r1
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	dc53      	bgt.n	8003d30 <__ieee754_log+0x150>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f7fc fed1 	bl	8000a30 <__aeabi_dcmpeq>
 8003c8e:	b1d0      	cbz	r0, 8003cc6 <__ieee754_log+0xe6>
 8003c90:	2c00      	cmp	r4, #0
 8003c92:	f000 8120 	beq.w	8003ed6 <__ieee754_log+0x2f6>
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7fc fbf8 	bl	800048c <__aeabi_i2d>
 8003c9c:	a390      	add	r3, pc, #576	; (adr r3, 8003ee0 <__ieee754_log+0x300>)
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	460f      	mov	r7, r1
 8003ca6:	f7fc fc5b 	bl	8000560 <__aeabi_dmul>
 8003caa:	a38f      	add	r3, pc, #572	; (adr r3, 8003ee8 <__ieee754_log+0x308>)
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	f7fc fc52 	bl	8000560 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	e7ba      	b.n	8003c3c <__ieee754_log+0x5c>
 8003cc6:	a38a      	add	r3, pc, #552	; (adr r3, 8003ef0 <__ieee754_log+0x310>)
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	4650      	mov	r0, sl
 8003cce:	4659      	mov	r1, fp
 8003cd0:	f7fc fc46 	bl	8000560 <__aeabi_dmul>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	2000      	movs	r0, #0
 8003cda:	4999      	ldr	r1, [pc, #612]	; (8003f40 <__ieee754_log+0x360>)
 8003cdc:	f7fc fa88 	bl	80001f0 <__aeabi_dsub>
 8003ce0:	4652      	mov	r2, sl
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	460f      	mov	r7, r1
 8003ce6:	465b      	mov	r3, fp
 8003ce8:	4650      	mov	r0, sl
 8003cea:	4659      	mov	r1, fp
 8003cec:	f7fc fc38 	bl	8000560 <__aeabi_dmul>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	f7fc fc32 	bl	8000560 <__aeabi_dmul>
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	460f      	mov	r7, r1
 8003d00:	b914      	cbnz	r4, 8003d08 <__ieee754_log+0x128>
 8003d02:	4632      	mov	r2, r6
 8003d04:	463b      	mov	r3, r7
 8003d06:	e0a0      	b.n	8003e4a <__ieee754_log+0x26a>
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7fc fbbf 	bl	800048c <__aeabi_i2d>
 8003d0e:	a374      	add	r3, pc, #464	; (adr r3, 8003ee0 <__ieee754_log+0x300>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	4680      	mov	r8, r0
 8003d16:	4689      	mov	r9, r1
 8003d18:	f7fc fc22 	bl	8000560 <__aeabi_dmul>
 8003d1c:	a372      	add	r3, pc, #456	; (adr r3, 8003ee8 <__ieee754_log+0x308>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	4604      	mov	r4, r0
 8003d24:	460d      	mov	r5, r1
 8003d26:	4640      	mov	r0, r8
 8003d28:	4649      	mov	r1, r9
 8003d2a:	f7fc fc19 	bl	8000560 <__aeabi_dmul>
 8003d2e:	e0a5      	b.n	8003e7c <__ieee754_log+0x29c>
 8003d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d34:	f7fc fa5e 	bl	80001f4 <__adddf3>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4650      	mov	r0, sl
 8003d3e:	4659      	mov	r1, fp
 8003d40:	f7fc fd38 	bl	80007b4 <__aeabi_ddiv>
 8003d44:	e9cd 0100 	strd	r0, r1, [sp]
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f7fc fb9f 	bl	800048c <__aeabi_i2d>
 8003d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f7fc fc01 	bl	8000560 <__aeabi_dmul>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d66:	f7fc fbfb 	bl	8000560 <__aeabi_dmul>
 8003d6a:	a363      	add	r3, pc, #396	; (adr r3, 8003ef8 <__ieee754_log+0x318>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	4680      	mov	r8, r0
 8003d72:	4689      	mov	r9, r1
 8003d74:	f7fc fbf4 	bl	8000560 <__aeabi_dmul>
 8003d78:	a361      	add	r3, pc, #388	; (adr r3, 8003f00 <__ieee754_log+0x320>)
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f7fc fa39 	bl	80001f4 <__adddf3>
 8003d82:	4642      	mov	r2, r8
 8003d84:	464b      	mov	r3, r9
 8003d86:	f7fc fbeb 	bl	8000560 <__aeabi_dmul>
 8003d8a:	a35f      	add	r3, pc, #380	; (adr r3, 8003f08 <__ieee754_log+0x328>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc fa30 	bl	80001f4 <__adddf3>
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	f7fc fbe2 	bl	8000560 <__aeabi_dmul>
 8003d9c:	a35c      	add	r3, pc, #368	; (adr r3, 8003f10 <__ieee754_log+0x330>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fa27 	bl	80001f4 <__adddf3>
 8003da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003daa:	f7fc fbd9 	bl	8000560 <__aeabi_dmul>
 8003dae:	a35a      	add	r3, pc, #360	; (adr r3, 8003f18 <__ieee754_log+0x338>)
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003db8:	4640      	mov	r0, r8
 8003dba:	4649      	mov	r1, r9
 8003dbc:	f7fc fbd0 	bl	8000560 <__aeabi_dmul>
 8003dc0:	a357      	add	r3, pc, #348	; (adr r3, 8003f20 <__ieee754_log+0x340>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fa15 	bl	80001f4 <__adddf3>
 8003dca:	4642      	mov	r2, r8
 8003dcc:	464b      	mov	r3, r9
 8003dce:	f7fc fbc7 	bl	8000560 <__aeabi_dmul>
 8003dd2:	a355      	add	r3, pc, #340	; (adr r3, 8003f28 <__ieee754_log+0x348>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fa0c 	bl	80001f4 <__adddf3>
 8003ddc:	4642      	mov	r2, r8
 8003dde:	464b      	mov	r3, r9
 8003de0:	f7fc fbbe 	bl	8000560 <__aeabi_dmul>
 8003de4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003df0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003df4:	f7fc f9fe 	bl	80001f4 <__adddf3>
 8003df8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8003dfc:	3551      	adds	r5, #81	; 0x51
 8003dfe:	4335      	orrs	r5, r6
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	4680      	mov	r8, r0
 8003e04:	4689      	mov	r9, r1
 8003e06:	dd48      	ble.n	8003e9a <__ieee754_log+0x2ba>
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <__ieee754_log+0x360>)
 8003e0c:	4650      	mov	r0, sl
 8003e0e:	4659      	mov	r1, fp
 8003e10:	f7fc fba6 	bl	8000560 <__aeabi_dmul>
 8003e14:	4652      	mov	r2, sl
 8003e16:	465b      	mov	r3, fp
 8003e18:	f7fc fba2 	bl	8000560 <__aeabi_dmul>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4606      	mov	r6, r0
 8003e22:	460f      	mov	r7, r1
 8003e24:	4640      	mov	r0, r8
 8003e26:	4649      	mov	r1, r9
 8003e28:	f7fc f9e4 	bl	80001f4 <__adddf3>
 8003e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e30:	f7fc fb96 	bl	8000560 <__aeabi_dmul>
 8003e34:	4680      	mov	r8, r0
 8003e36:	4689      	mov	r9, r1
 8003e38:	b964      	cbnz	r4, 8003e54 <__ieee754_log+0x274>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4639      	mov	r1, r7
 8003e42:	f7fc f9d5 	bl	80001f0 <__aeabi_dsub>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	4659      	mov	r1, fp
 8003e4e:	f7fc f9cf 	bl	80001f0 <__aeabi_dsub>
 8003e52:	e6da      	b.n	8003c0a <__ieee754_log+0x2a>
 8003e54:	a322      	add	r3, pc, #136	; (adr r3, 8003ee0 <__ieee754_log+0x300>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e5e:	f7fc fb7f 	bl	8000560 <__aeabi_dmul>
 8003e62:	a321      	add	r3, pc, #132	; (adr r3, 8003ee8 <__ieee754_log+0x308>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	4604      	mov	r4, r0
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e70:	f7fc fb76 	bl	8000560 <__aeabi_dmul>
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	f7fc f9bc 	bl	80001f4 <__adddf3>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4630      	mov	r0, r6
 8003e82:	4639      	mov	r1, r7
 8003e84:	f7fc f9b4 	bl	80001f0 <__aeabi_dsub>
 8003e88:	4652      	mov	r2, sl
 8003e8a:	465b      	mov	r3, fp
 8003e8c:	f7fc f9b0 	bl	80001f0 <__aeabi_dsub>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	e7d9      	b.n	8003e4e <__ieee754_log+0x26e>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4650      	mov	r0, sl
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	f7fc f9a5 	bl	80001f0 <__aeabi_dsub>
 8003ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eaa:	f7fc fb59 	bl	8000560 <__aeabi_dmul>
 8003eae:	4606      	mov	r6, r0
 8003eb0:	460f      	mov	r7, r1
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	f43f af25 	beq.w	8003d02 <__ieee754_log+0x122>
 8003eb8:	a309      	add	r3, pc, #36	; (adr r3, 8003ee0 <__ieee754_log+0x300>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ec2:	f7fc fb4d 	bl	8000560 <__aeabi_dmul>
 8003ec6:	a308      	add	r3, pc, #32	; (adr r3, 8003ee8 <__ieee754_log+0x308>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	4604      	mov	r4, r0
 8003ece:	460d      	mov	r5, r1
 8003ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ed4:	e729      	b.n	8003d2a <__ieee754_log+0x14a>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	2100      	movs	r1, #0
 8003eda:	e696      	b.n	8003c0a <__ieee754_log+0x2a>
 8003edc:	f3af 8000 	nop.w
 8003ee0:	fee00000 	.word	0xfee00000
 8003ee4:	3fe62e42 	.word	0x3fe62e42
 8003ee8:	35793c76 	.word	0x35793c76
 8003eec:	3dea39ef 	.word	0x3dea39ef
 8003ef0:	55555555 	.word	0x55555555
 8003ef4:	3fd55555 	.word	0x3fd55555
 8003ef8:	df3e5244 	.word	0xdf3e5244
 8003efc:	3fc2f112 	.word	0x3fc2f112
 8003f00:	96cb03de 	.word	0x96cb03de
 8003f04:	3fc74664 	.word	0x3fc74664
 8003f08:	94229359 	.word	0x94229359
 8003f0c:	3fd24924 	.word	0x3fd24924
 8003f10:	55555593 	.word	0x55555593
 8003f14:	3fe55555 	.word	0x3fe55555
 8003f18:	d078c69f 	.word	0xd078c69f
 8003f1c:	3fc39a09 	.word	0x3fc39a09
 8003f20:	1d8e78af 	.word	0x1d8e78af
 8003f24:	3fcc71c5 	.word	0x3fcc71c5
 8003f28:	9997fa04 	.word	0x9997fa04
 8003f2c:	3fd99999 	.word	0x3fd99999
 8003f30:	c3500000 	.word	0xc3500000
 8003f34:	43500000 	.word	0x43500000
 8003f38:	7fefffff 	.word	0x7fefffff
 8003f3c:	3ff00000 	.word	0x3ff00000
 8003f40:	3fe00000 	.word	0x3fe00000

08003f44 <matherr>:
 8003f44:	2000      	movs	r0, #0
 8003f46:	4770      	bx	lr

08003f48 <nan>:
 8003f48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003f50 <nan+0x8>
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	00000000 	.word	0x00000000
 8003f54:	7ff80000 	.word	0x7ff80000

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
